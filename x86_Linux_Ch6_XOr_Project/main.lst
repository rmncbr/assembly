     1                                  ;
     2                                  ;This program will test out the functions library
     3                                  ;
     4                                  ;
     5                                  ;Include our external functions library functions
     6                                  %include "./functions.inc"
     1                              <1> ;
     2                              <1> ;Include file for the functions library
     3                              <1> ;
     4                              <1> sys_exit	equ	1h
     5                              <1> sys_read	equ	3h
     6                              <1> sys_write	equ	4h
     7                              <1> stdin		equ	0h
     8                              <1> stdout		equ	1h
     9                              <1> stderr		equ	3h
    10                              <1> 
    11                              <1> ;Print a string which is not null terminated
    12                              <1> ;Stack contents:
    13                              <1> ;	The Address of the string to print
    14                              <1> ;	The length of the string to print
    15                              <1> ;Example Usage:
    16                              <1> ;	push	stringVariable
    17                              <1> ;	push	stringVariable.len
    18                              <1> ;	call	PrintText
    19                              <1> ;
    20                              <1> extern		PrintText
    21                              <1> 
    22                              <1> ;Clears the keyboard buffer until \n or null are encountered
    23                              <1> ;Stack contents:
    24                              <1> ;	None
    25                              <1> ;Example Usage:
    26                              <1> ;	call	ClearKBuffer
    27                              <1> ;
    28                              <1> extern		ClearKBuffer
    29                              <1> 
    30                              <1> ;Print a new line to the console
    31                              <1> ;Stack Contents:
    32                              <1> ;	None
    33                              <1> ;Example Usage:
    34                              <1> ;	call	Printendl
    35                              <1> ;
    36                              <1> extern		Printendl
    37                              <1> 
    38                              <1> ;Convert and then print a 32bit decimal number
    39                              <1> ;Stack contents:
    40                              <1> ;	Value to Convert to an Ascii String
    41                              <1> ;Example Usage:
    42                              <1> ;	push DWORD [dwordvariable]
    43                              <1> ;	call	Print32bitNumDecimal
    44                              <1> ;
    45                              <1> extern		Print32bitNumDecimal
    46                              <1> 
    47                              <1> ;Convert and then print a 32bit signed decimal number
    48                              <1> ;Stack contents:
    49                              <1> ;	Value to Convert to an Ascii String
    50                              <1> ;Example Usage:
    51                              <1> ;	push DWORD [dwordvariable]
    52                              <1> ;	call	Print32bitSNumDecimal
    53                              <1> ;
    54                              <1> extern		Print32bitSNumDecimal
    55                              <1> 
    56                              <1> ;Convert and then print a 32bit binary number
    57                              <1> ;Stack contents:
    58                              <1> ;	Value to Convert to an Ascii String
    59                              <1> ;Example Usage:
    60                              <1> ;	push DWORD [dwordvariable]
    61                              <1> ;	call	Print32bitNumBinary
    62                              <1> ;
    63                              <1> extern		Print32bitNumBinary
    64                              <1> 
    65                              <1> ;Print a full 32bit binary number including leading zeros
    66                              <1> ;Stack contents:
    67                              <1> ;	Value to Convert to an Ascii String
    68                              <1> ;Example Usage:
    69                              <1> ;	push DWORD [dwordvariable]
    70                              <1> ;	call	Print32bitFullBinary
    71                              <1> ;
    72                              <1> extern		Print32bitFullBinary
    73                              <1> 
    74                              <1> ;Print a full 32-bits binary number in Floating Point format.
    75                              <1> ;Stack contents:
    76                              <1> ;	Value to Print to an Ascii String
    77                              <1> ;Example Usage:
    78                              <1> ;	push	eax
    79                              <1> ;	call	Print32bitFloatBinary
    80                              <1> extern		Print32bitFloatBinary
    81                              <1> 
    82                              <1> ;Convert and then print a 32bit hex number
    83                              <1> ;Stack contents:
    84                              <1> ;	Value to Convert to an Ascii String
    85                              <1> ;Example Usage:
    86                              <1> ;	push	DWORD [dWordVariable]
    87                              <1> ;	call	Print32bitNumHex
    88                              <1> ;
    89                              <1> extern		Print32bitNumHex
    90                              <1> 
    91                              <1> ;Print all 32bit Registers to the screen
    92                              <1> ;Stack contents:
    93                              <1> ;	None
    94                              <1> ;Example Usage:
    95                              <1> ;	call	PrintRegisters
    96                              <1> ;
    97                              <1> extern		PrintRegisters
    98                              <1> 
    99                              <1> ;Print all of the floating point registers ST0 - ST7
   100                              <1> ;Stack Contents:
   101                              <1> ;	None
   102                              <1> ;Return: 	None
   103                              <1> ;Example Usage:
   104                              <1> ;	call	PrintFloatingRegisters
   105                              <1> extern		PrintFloatingRegisters
   106                              <1> 
   107                              <1> ;Print a string with an ending 00h delimiter to the console
   108                              <1> ;Arguments:	Address of the String (Stack)
   109                              <1> ;Example Usage:
   110                              <1> ;	push	stackVariable
   111                              <1> ;	call	PrintString
   112                              <1> extern		PrintString
   113                              <1> 
   114                              <1> ;Print a string with an ending 00h delimiter to the console Right Justified to a print area
   115                              <1> ;Arguments:	Address of the String (Stack)
   116                              <1> ;			Width of the print area to print into
   117                              <1> ;Example Usage:
   118                              <1> ;	push	stackVariable
   119                              <1> ;	push	20
   120                              <1> ;	call	PrintRight
   121                              <1> extern		PrintRight
   122                              <1> 
   123                              <1> ;Print a string with an ending 00h delimiter to the console Left Justified to a print area
   124                              <1> ;Arguments:	Address of the String (Stack)
   125                              <1> ;			Width of the print area to print into
   126                              <1> ;Example Usage:
   127                              <1> ;	push	stackVariable
   128                              <1> ;	push	20
   129                              <1> ;	call	PrintLeft
   130                              <1> extern		PrintLeft
   131                              <1> 
   132                              <1> ;Print a string with an ending 00h delimiter to the console Centered to a print area
   133                              <1> ;Arguments:	Address of the String (Stack)
   134                              <1> ;			Width of the print area to print into
   135                              <1> ;Example Usage:
   136                              <1> ;	push	stackVariable
   137                              <1> ;	push	20
   138                              <1> ;	call	PrintCenter
   139                              <1> extern		PrintCenter
   140                              <1> 
   141                              <1> ;Print a space to the console
   142                              <1> ;Arguments:	None
   143                              <1> ;Example Usage:
   144                              <1> ;	call	PrintSpace
   145                              <1> extern		PrintSpace
   146                              <1> 
   147                              <1> ;Print a comma followed by a space to the console
   148                              <1> ;Arguments:	None
   149                              <1> ;Example Usage:
   150                              <1> ;	call	PrintComma
   151                              <1> extern		PrintComma
   152                              <1> 
   153                              <1> ;Print all byte values found in an array in Hex format
   154                              <1> ;Arguments:	Address of the Array (Stack)
   155                              <1> ;			Number of items in the array
   156                              <1> ;Example Usage:
   157                              <1> ;	push	arrayLabel
   158                              <1> ;	push	20
   159                              <1> ;	call	PrintByteArray
   160                              <1> extern		PrintByteArray
   161                              <1> 
   162                              <1> ;Print all byte values found in an array in Decimal format
   163                              <1> ;Arguments:	Address of the Array (Stack)
   164                              <1> ;			Number of items in the array
   165                              <1> ;Example Usage:
   166                              <1> ;	push	arrayLabel
   167                              <1> ;	push	20
   168                              <1> ;	call	PrintByteArrayDec
   169                              <1> extern		PrintByteArrayDec
   170                              <1> 
   171                              <1> ;Print all signed byte values found in an array in Decimal format
   172                              <1> ;Arguments:	Address of the Array (Stack)
   173                              <1> ;			Number of items in the array
   174                              <1> ;Example Usage:
   175                              <1> ;	push	arrayLabel
   176                              <1> ;	push	20
   177                              <1> ;	call	PrintSByteArrayDec
   178                              <1> extern		PrintSByteArrayDec
   179                              <1> 
   180                              <1> ;Print all word values found in an array in Hex format
   181                              <1> ;Arguments:	Address of the Array (Stack)
   182                              <1> ;			Number of items in the array
   183                              <1> ;Example Usage:
   184                              <1> ;	push	arrayLabel
   185                              <1> ;	push	20
   186                              <1> ;	call	PrintWordArray
   187                              <1> extern		PrintWordArray
   188                              <1> 
   189                              <1> ;Print all word values found in an array in Decimal format
   190                              <1> ;Arguments:	Address of the Array (Stack)
   191                              <1> ;			Number of items in the array
   192                              <1> ;Example Usage:
   193                              <1> ;	push	arrayLabel
   194                              <1> ;	push	20
   195                              <1> ;	call	PrintWordArrayDec
   196                              <1> extern		PrintWordArrayDec
   197                              <1> 
   198                              <1> ;Print all signed word values found in an array in Decimal format
   199                              <1> ;Arguments:	Address of the Array (Stack)
   200                              <1> ;			Number of items in the array
   201                              <1> ;Example Usage:
   202                              <1> ;	push	arrayLabel
   203                              <1> ;	push	20
   204                              <1> ;	call	PrintSWordArrayDec
   205                              <1> extern		PrintSWordArrayDec
   206                              <1> 
   207                              <1> ;Print all Double Word values found in an array in Hex format
   208                              <1> ;Arguments:	Address of the Array (Stack)
   209                              <1> ;			Number of items in the array
   210                              <1> ;Example Usage:
   211                              <1> ;	push	arrayLabel
   212                              <1> ;	push	20
   213                              <1> ;	call	PrintDWordArray
   214                              <1> extern		PrintDWordArray
   215                              <1> 
   216                              <1> ;Print all Double Word values found in an array in Decimal format
   217                              <1> ;Arguments:	Address of the Array (Stack)
   218                              <1> ;			Number of items in the array
   219                              <1> ;Example Usage:
   220                              <1> ;	push	arrayLabel
   221                              <1> ;	push	20
   222                              <1> ;	call	PrintDWordArrayDec
   223                              <1> extern		PrintDWordArrayDec
   224                              <1> 
   225                              <1> ;Print all signed Double Word values found in an array in Decimal format
   226                              <1> ;Arguments:	Address of the Array (Stack)
   227                              <1> ;			Number of items in the array
   228                              <1> ;Example Usage:
   229                              <1> ;	push	arrayLabel
   230                              <1> ;	push	20
   231                              <1> ;	call	PrintSDWordArrayDec
   232                              <1> extern		PrintSDWordArrayDec
   233                              <1> 
   234                              <1> ;Print a Double-word floating point number
   235                              <1> ;This version uses the integer extraction power of the FPU instead of moving bits
   236                              <1> ;	around to extract the exponent and left/right mantissa's making this a
   237                              <1> ;	much easier and shorter algorithm
   238                              <1> ;Stack Contents:
   239                              <1> ;	The floating point number to print
   240                              <1> ;	The number of fractional Digits to print
   241                              <1> ;Return:
   242                              <1> ;	None
   243                              <1> ;Example Usage:
   244                              <1> ;	push	[numberToPrint]
   245                              <1> ;	push	[fractionalDigits]
   246                              <1> ;	call	PrintDWFloat
   247                              <1> extern		PrintDWFloat
   248                              <1> 
   249                              <1> ;Print a Double-word floating point number in scientific notation
   250                              <1> ;This version uses the integer extraction power of the FPU instead of moving bits
   251                              <1> ;	around to extract the exponent and left/right mantissa's making this a
   252                              <1> ;	much easier and shorter algorithm
   253                              <1> ;Stack Contents:
   254                              <1> ;	The floating point number to print
   255                              <1> ;	The number of fractional Digits to print
   256                              <1> ;Return:
   257                              <1> ;	None
   258                              <1> ;Example Usage:
   259                              <1> ;	push	[numberToPrint]
   260                              <1> ;	push	[fractionalDigits]
   261                              <1> ;	call	PrintDWFloatSN
   262                              <1> extern		PrintDWFloatSN
   263                              <1> 
   264                              <1> ;Get a random number from the CPU
   265                              <1> ;Stack contents:
   266                              <1> ;	The maximum value of the random number
   267                              <1> ;	Signed = 1, Unsigned = 0
   268                              <1> ;Return Value:
   269                              <1> ;	eax = Random number value
   270                              <1> ;Example Usage:
   271                              <1> ;	push 	DWORD 200			;Will create a random number no greater than 200
   272                              <1> ;	push	DWORD 1				;1 = signed, 0 = uinsigned
   273                              <1> ;	call	GetRandomInt
   274                              <1> ;
   275                              <1> extern		GetRandomInt
   276                              <1> 
   277                              <1> ;Return, in eax, an integer entered by the user
   278                              <1> ;Arguments: none
   279                              <1> ;Example Usage:
   280                              <1> ;	call	InputInt
   281                              <1> extern		InputInt
   282                              <1> 
   283                              <1> ;Call the necessary interrupt with the necessary register values to read data from the keyboard
   284                              <1> ;Stack Contents:
   285                              <1> ;	Address of keyboard buffer
   286                              <1> ;	Size of the keyboard buffer
   287                              <1> ;Return:
   288                              <1> ;	eax will contain the number of characters the user input
   289                              <1> ;Example Usage:
   290                              <1> ;	push	readbuffer
   291                              <1> ;	push	readbuffer.len
   292                              <1> ;	call	ReadText
   293                              <1> extern		ReadText
   294                              <1> 
   295                              <1> ;Call the necessary interrupt with the necessary register values to read data from the keyboard
   296                              <1> ;Stack Contents:
   297                              <1> ;	Address of the string to print
   298                              <1> ;	Address of keyboard buffer
   299                              <1> ;	Size of the keyboard buffer
   300                              <1> ;Return:
   301                              <1> ;	eax will contain the number of characters input
   302                              <1> ;Example Usage:
   303                              <1> ;	push	inputPromptVariable
   304                              <1> ;	push	keyboardBufferVariable
   305                              <1> ;	push	keyboardBufferVariable.len  ;This is the maximum size of the buffer
   306                              <1> ;	call	ReadTextWPrompt
   307                              <1> extern		ReadTextWPrompt
   308                              <1> 
   309                              <1> ;Call the necessary interrupt with the necessary register values to read the system time Hour
   310                              <1> ;Arguments: None
   311                              <1> ;Return:  eax:  The current hour
   312                              <1> ;Example Usage:
   313                              <1> ;	call	GetCurrentHour
   314                              <1> extern		GetCurrentHour
   315                              <1> 
   316                              <1> ;Call the necessary interrupt with the necessary register values to read the system time Minute
   317                              <1> ;Arguments: None
   318                              <1> ;Return:  eax:  The current minute
   319                              <1> ;Example Usage:
   320                              <1> ;	call	GetCurrentMinute
   321                              <1> extern		GetCurrentMinute
   322                              <1> 
   323                              <1> ;Call the necessary interrupt with the necessary register values to read the system time Second
   324                              <1> ;Arguments: None
   325                              <1> ;Return:  eax:  The current second
   326                              <1> ;Example Usage:
   327                              <1> ;	call	GetCurrentSecond
   328                              <1> extern		GetCurrentSecond
   329                              <1> 
   330                              <1> ;Call the function to get the system time and then print it
   331                              <1> ;Arguments: None
   332                              <1> ;Return:  None
   333                              <1> ;Example Usage:
   334                              <1> ;	call	PrintSystemTime
   335                              <1> extern		PrintSystemTime
   336                              <1> 
   337                              <1> ;Call the function to get the CPU's Time Stamp Counter
   338                              <1> ;Arguments: None
   339                              <1> ;Return:  eax
   340                              <1> ;Example Usage:
   341                              <1> ;	call	GetTSC
   342                              <1> extern		GetTSC
   343                              <1> 
   344                              <1> ;An Internal function used to get the system time hours, minutes, seconds
   345                              <1> ;Stack Contents:
   346                              <1> ; None
   347                              <1> ;Return: None
   348                              <1> ;Example Usage
   349                              <1> ;   call GetSystemTime
   350                              <1> extern		GetSystemTime
   351                              <1> 
   352                              <1> ;Input UnSigned Int
   353                              <1> ;This function will let the user input an integer returned into the EAX register
   354                              <1> ;Arguments: None
   355                              <1> ;Return: 	eax will contain the usigned ingeter
   356                              <1> ;			Carry flag will be set if invalid integer was input
   357                              <1> ;Example Usage:
   358                              <1> ;	call	InputInt
   359                              <1> ;	Note: eax will contain the value of the unsigned integer entered
   360                              <1> ;	jnc		validIntegerInput
   361                              <1> ;	Otherwise, an invalid integer was input
   362                              <1> extern		InputUInt
   363                              <1> 
   364                              <1> ;Input Signed Int
   365                              <1> ;This function will let the user input a signed integer and put the value
   366                              <1> ;into the EAX register.
   367                              <1> ;Arguments: None
   368                              <1> ;Return: 	eax will contain the usigned ingeter
   369                              <1> ;			Carry flag will be set if invalid integer was input
   370                              <1> ;Example Usage:
   371                              <1> ;	call	InputSInt
   372                              <1> ;	Note: eax will contain the value of the signed integer entered
   373                              <1> ;	jnc		validIntegerInput
   374                              <1> ;	Otherwise, an invalid integer was input
   375                              <1> extern		InputSInt
   376                              <1> 
   377                              <1> ;Input Binary Number
   378                              <1> ;This function will let the user input a string, then it will check it to make sure it
   379                              <1> ;is a binary string.  It will then convert the ASCII string into a DWORD and return
   380                              <1> ;that value in the EAX register.
   381                              <1> ;Arguments:
   382                              <1> ;	None
   383                              <1> ;Return: 	eax will contain the numeric binary value
   384                              <1> ;			Carry flag will be set if invalid binary number was input
   385                              <1> ;Example Usage:
   386                              <1> ;	call	InputBin
   387                              <1> ;	jnc		ValidBinLabel
   388                              <1> ;	otherwise, a problem occured - print an error message
   389                              <1> extern		InputBin
   390                              <1> 
   391                              <1> ;This function will let the user input a string, then it will check it to make sure it
   392                              <1> ;is a hexidecimal string.  It will then convert the ASCII string into a DWORD and return
   393                              <1> ;that value in the EAX register.
   394                              <1> ;Arguments:
   395                              <1> ;	None
   396                              <1> ;Return: 	eax will contain the numeric hexidecimal value
   397                              <1> ;			Carry flag will be set if invalid hex number was input
   398                              <1> ;Example Usage:
   399                              <1> ;	call	InputHex
   400                              <1> ;	jnc		ValidHexLabel
   401                              <1> ;	otherwise, a problem occured - print an error message
   402                              <1> extern		InputHex
   403                              <1> 
   404                              <1> ;Input a Floating Point Number
   405                              <1> ;This function will let the user input a string, then it will check it to make sure it
   406                              <1> ;is a valid floating point number.  It will then convert the ASCII string into a EWORD
   407                              <1> ;and return that value in the EAX register.
   408                              <1> ;Stack Contents:
   409                              <1> ;	None
   410                              <1> ;Return: 	EAX and ST(0) will contain the number
   411                              <1> ;			Carry flag will be set if invalid binary number was input
   412                              <1> ;Example Usage:
   413                              <1> ;	call	InputFloat
   414                              <1> ;	jnc		ValidFloatLabel
   415                              <1> ;	otherwise, a problem occured - print an error message
   416                              <1> extern		InputFloat
   417                              <1> 
   418                              <1> ;Calculate the Average in a Double Word Array
   419                              <1> ;Arguments:	ArrayAddress (Stack)
   420                              <1> ;			Number of Items in the Array (Stack)
   421                              <1> ;Return:	eax will contain the average
   422                              <1> ;Example Usage:
   423                              <1> ;	push	arrayLabel
   424                              <1> ;	push	20
   425                              <1> ;	call	DWArrayAverage
   426                              <1> extern		DWArrayAverage
   427                              <1> 
   428                              <1> ;Calculate the Average in a Word Array
   429                              <1> ;Arguments:	ArrayAddress (Stack)
   430                              <1> ;			Number of Items in the Array (Stack)
   431                              <1> ;Return:	eax will contain the average
   432                              <1> ;Example Usage:
   433                              <1> ;	push	arrayLabel
   434                              <1> ;	push	20
   435                              <1> ;	call	WArrayAverage
   436                              <1> extern		WArrayAverage
   437                              <1> 
   438                              <1> ;Calculate the Average in a Byte Array
   439                              <1> ;Arguments:	ArrayAddress (Stack)
   440                              <1> ;			Number of Items in the Array (Stack)
   441                              <1> ;Return:	eax will contain the average
   442                              <1> ;Example Usage:
   443                              <1> ;	push	arrayLabel
   444                              <1> ;	push	20
   445                              <1> ;	call	BArrayAverage
   446                              <1> extern		BArrayAverage
   447                              <1> 
   448                              <1> ;Allocate some memory (x bytes)	and return the high address to EAX
   449                              <1> ;Stack Contents:
   450                              <1> ;	Number of BYTES to add to memory
   451                              <1> ;Return: 	EAX will contain the new high memory address
   452                              <1> ;Example Usage:
   453                              <1> ;	push	DWORD 1024			;increase memory by 1024 bytes
   454                              <1> ;	call	AllocateBytes
   455                              <1> extern		AllocateBytes
   456                              <1> 
   457                              <1> ;Free some memory (x bytes)	and return the high address to EAX
   458                              <1> ;Stack Contents:
   459                              <1> ;	Number of BYTES to remove from memory
   460                              <1> ;Return: 	EAX will contain the new high memory address
   461                              <1> ;Example Usage:
   462                              <1> ;	push	DWORD 1024			;reduce memory by 1024 bytes
   463                              <1> ;	call	FreeBytes
   464                              <1> extern		FreeBytes
   465                              <1> 
   466                              <1> ;Allocate some memory as a-word array
   467                              <1> ;Arguments:	Number of DWORDS to allocate (Stack)
   468                              <1> ;Return:	eax will contain highest address of this memory
   469                              <1> ;Example Usage:
   470                              <1> ;	push	20
   471                              <1> ;	call	AllocateWORDArray
   472                              <1> extern		AllocateWORDArray
   473                              <1> 
   474                              <1> ;Allocate some memory as a double-word array
   475                              <1> ;Arguments:	Number of DWORDS to allocate (Stack)
   476                              <1> ;Return:	eax will contain highest address of this memory
   477                              <1> ;Example Usage:
   478                              <1> ;	push	20
   479                              <1> ;	call	AllocateDWORDArray
   480                              <1> extern		AllocateDWORDArray
   481                              <1> 
   482                              <1> ;Simple xor encryption/decryption of a string using a user entered key
   483                              <1> ;Arguments:	String address to encrypt/decrypt (Stack ebp + 24)
   484                              <1> ;			Length of the string to encrypt (Stack ebp + 20)
   485                              <1> ;			string address to be used as a key (Stack ebp + 16)
   486                              <1> ;			integer value indicating the length of the key (Stack ebp + 12)
   487                              <1> ;			string address where the encrypted/decrypted data should go (Stack ebp + 8)
   488                              <1> ;Return:	Total bytes encrypted in eax
   489                              <1> ;Example Usage:
   490                              <1> ;	push	stringToEncrypt
   491                              <1> ;	push	20
   492                              <1> ;	push	keyAddress
   493                              <1> ;	push	8
   494                              <1> ;	push	targetString
   495                              <1> ;	call	EncryptString
   496                              <1> extern		EncryptString
   497                              <1> 
   498                              <1> ;Get the length of a string based on a null (00) delimeter
   499                              <1> ;Arguments: Address of the string
   500                              <1> ;Return:	Size of the string in eax
   501                              <1> ;Example Usage:
   502                              <1> ;	push	arrayLabel
   503                              <1> ;	call	StringSize
   504                              <1> extern		StringSize
   505                              <1> 
   506                              <1> ;Calculate the GCD of two numbers passed to this function
   507                              <1> ;Arguments: Integer #1 and Integer #2 in the stack
   508                              <1> ;Return:	GCD in eax
   509                              <1> ;Example Usage:
   510                              <1> ;	push	[number1]
   511                              <1> ;	push	[number2]
   512                              <1> ;	call	CalcGCD
   513                              <1> extern		CalcGCD
   514                              <1> 
   515                              <1> ;Calculate the factorial of a number passed to this function
   516                              <1> ;Arguments:	Integer number in the stack
   517                              <1> ;Return:	Factorial of x in eax
   518                              <1> ;Example Usage:
   519                              <1> ;	push	[number1]
   520                              <1> ;	call	CalcFactorial
   521                              <1> extern		CalcFactorial
   522                              <1> 
   523                              <1> ;Calculate the factorial of a number passed to this function
   524                              <1> ;Arguments:	Integer number in the stack
   525                              <1> ;Return:	Factorial of x in eax as a floating point value
   526                              <1> ;Example Usage:
   527                              <1> ;	push	[number1]
   528                              <1> ;	call	CalcFactorialFloat
   529                              <1> extern		CalcFactorialFloat
   530                              <1> 
   531                              <1> ;Set the carry flag if the floating poing number pushed onto the Stack
   532                              <1> ;is a +NAN, -NAN, +Infinity or -Infinity
   533                              <1> ;Stack Contents:
   534                              <1> ; DWORD Floating Point number (Stack)
   535                              <1> ;Return: Carry Flag Set if NAN, Clear if OK
   536                              <1> ;Example Usage
   537                              <1> ;   push  DWORD [floatingVariable]
   538                              <1> ;   call  IsNAN
   539                              <1> extern    IsNAN
   540                              <1> 
   541                              <1> ;Print the date in the format mm/dd/yyyy
   542                              <1> ;Stack Contents:
   543                              <1> ; None
   544                              <1> ;Return: None
   545                              <1> ;Example Usage
   546                              <1> ;   call PrintSystemDateEng
   547                              <1> extern		PrintSystemDateEng
   548                              <1> 
   549                              <1> ;Print the date in the format yyyy/mm/dd
   550                              <1> ;Stack Contents:
   551                              <1> ; None
   552                              <1> ;Return: None
   553                              <1> ;Example Usage
   554                              <1> ;   call PrintSystemDateEuro
   555                              <1> extern		PrintSystemDateEuro
   556                              <1> 
   557                              <1> ;Convert and then return in a byte array a64-but number in decimal format
   558                              <1> ;Stack contents:
   559                              <1> ;	Value to Convert to an Ascii String
   560                              <1> ;	Address of byte array to contain the result
   561                              <1> ;Return Value:
   562                              <1> ;	eax = Number of characters returned
   563                              <1> ;Example Usage:
   564                              <1> ;	push 	DWORD [doublewordvariable]
   565                              <1> ;	push 	stringbuffer
   566                              <1> ;	call	ToString32bitNumDecimal
   567                              <1> ;
   568                              <1> extern		ToString32bitNumDecimal
   569                              <1> 
   570                              <1> ;Convert and then return in a byte array a 64bit signed number in decimal format
   571                              <1> ;Stack contents:
   572                              <1> ;	Value to Convert to an Ascii String
   573                              <1> ;	Address of byte array to contain the result
   574                              <1> ;Return Value:
   575                              <1> ;	eax = Number of characters returned
   576                              <1> ;Example Usage:
   577                              <1> ;	push 	DWORD [doublewordvariable]
   578                              <1> ;	push 	stringbuffer
   579                              <1> ;	call	ToString32bitSNumDecimal
   580                              <1> ;
   581                              <1> extern		ToString32bitSNumDecimal
   582                              <1> 
   583                              <1> ;Get the system date in English format and return to the calling function in th array
   584                              <1> ;	provided
   585                              <1> ;Stack contents:
   586                              <1> ;	Address of byte array to contain the result
   587                              <1> ;Return Value:
   588                              <1> ;	eax = Number of characters returned
   589                              <1> ;Example Usage:
   590                              <1> ;	push 	stringbuffer
   591                              <1> ;	call	GetEngDateString
   592                              <1> ;
   593                              <1> extern		GetEngDateString
   594                              <1> 
   595                              <1> ;Get the system date in European format and return to the calling function in th array
   596                              <1> ;	provided
   597                              <1> ;Stack contents:
   598                              <1> ;	Address of byte array to contain the result
   599                              <1> ;Return Value:
   600                              <1> ;	eax = Number of characters returned
   601                              <1> ;Example Usage:
   602                              <1> ;	push 	stringbuffer
   603                              <1> ;	call	GetEuroDateString
   604                              <1> ;
   605                              <1> extern		GetEuroDateString
   606                              <1> 
   607                              <1> ;Get the system time and return to the calling function in th array
   608                              <1> ;	provided
   609                              <1> ;Stack contents:
   610                              <1> ;	Address of byte array to contain the result
   611                              <1> ;Return Value:
   612                              <1> ;	eax = Number of characters returned
   613                              <1> ;Example Usage:
   614                              <1> ;	push 	stringbuffer
   615                              <1> ;	call	GetTimeString
   616                              <1> ;
   617                              <1> extern		GetTimeString
   618                              <1> 
   619                              <1> ;Calculate the Variance from an array of numbers
   620                              <1> ;Stack contents:
   621                              <1> ;	Address of sample array of Double words
   622                              <1> ;	The number of samples to process
   623                              <1> ;Return Value:
   624                              <1> ;	eax = Calculated Variance
   625                              <1> ;Example Usage:
   626                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   627                              <1> ;	push	10					;process 10 of the numbers in the array
   628                              <1> ;	call	CalcVariance
   629                              <1> ;
   630                              <1> extern		CalcVariance
   631                              <1> 
   632                              <1> ;Calculate the Standard Deviation from an array of numbers
   633                              <1> ;Stack contents:
   634                              <1> ;	Address of sample array of Double words
   635                              <1> ;	The number of samples to process
   636                              <1> ;Return Value:
   637                              <1> ;	eax = Calculated Standard Deviation
   638                              <1> ;Example Usage:
   639                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   640                              <1> ;	push	10					;process 10 of the numbers in the array
   641                              <1> ;	call	CalcStdDev
   642                              <1> ;
   643                              <1> extern		CalcStdDev
   644                              <1> 
   645                              <1> ;Calculate the Mean from an array of numbers
   646                              <1> ;Stack contents:
   647                              <1> ;	Address of sample array of Double words
   648                              <1> ;	The number of samples to process
   649                              <1> ;Return Value:
   650                              <1> ;	eax = Calculated Mean
   651                              <1> ;Example Usage:
   652                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   653                              <1> ;	push	10					;process 10 of the numbers in the array
   654                              <1> ;	call	CalcMean
   655                              <1> ;
   656                              <1> extern		CalcMean
   657                              <1> 
   658                              <1> ;Fills an array with random double values
   659                              <1> ;Stack contents:
   660                              <1> ;	Address of array of Double words
   661                              <1> ;	The number of samples to process
   662                              <1> ;	Maximum value of the random number(s)
   663                              <1> ;	Signed = 1, Unsigned = 0
   664                              <1> ;Return Value:
   665                              <1> ;	Nothing
   666                              <1> ;Example Usage:
   667                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   668                              <1> ;	push	10					;process 10 of the numbers in the array
   669                              <1> ;	push	500					;The maximum random value should be 500
   670                              <1> ;	push	0					;Unsigned only
   671                              <1> ;	call	RandomArray
   672                              <1> ;
   673                              <1> extern		RandomArray
   674                              <1> 
     7                                   
     8                                  SECTION .data
     9 00000000 57656C636F6D652074-     	openPrompt			db	"Welcome to my Program", 0dh, 0ah, 0h	;Prompt String
     9 00000009 6F206D792050726F67-
     9 00000012 72616D0D0A00       
    10 00000018 50726F6772616D2065-     	goodbyePrompt		db 	"Program ending, have a nice day", 0dh, 0ah, 0h
    10 00000021 6E64696E672C206861-
    10 0000002A 76652061206E696365-
    10 00000033 206461790D0A00     
    11 0000003A 0D0A00                  	endl				db	0dh, 0ah, 0h
    12                                  		.len			equ ($-endl)
    13                                  	
    14 0000003D 456E63727970742F44-     	programTitle		db	"Encrypt/Decrypt Program", 0dh, 0ah
    14 00000046 656372797074205072-
    14 0000004F 6F6772616D0D0A     
    15 00000056 312920456E74657220-      						db	"1) Enter a String", 0dh, 0ah
    15 0000005F 6120537472696E670D-
    15 00000068 0A                 
    16 00000069 322920456E74657220-      						db	"2) Enter an Encryption key", 0dh, 0ah
    16 00000072 616E20456E63727970-
    16 0000007B 74696F6E206B65790D-
    16 00000084 0A                 
    17 00000085 3329205072696E7420-      						db 	"3) Print the input String", 0dh, 0ah
    17 0000008E 74686520696E707574-
    17 00000097 20537472696E670D0A 
    18 000000A0 3429205072696E7420-      	    				db	"4) Print the input Key", 0dh, 0ah
    18 000000A9 74686520696E707574-
    18 000000B2 204B65790D0A       
    19 000000B8 352920456E63727970-     						db	"5) Encrypt/Display the Key", 0dh, 0ah
    19 000000C1 742F446973706C6179-
    19 000000CA 20746865204B65790D-
    19 000000D3 0A                 
    20 000000D4 362920446563727970-      						db	"6) Decrypt/Display the Key", 0dh, 0ah
    20 000000DD 742F446973706C6179-
    20 000000E6 20746865204B65790D-
    20 000000EF 0A                 
    21 000000F0 782920457869742074-      						db	"x) Exit the Program", 0dh, 0ah
    21 000000F9 68652050726F677261-
    21 00000102 6D0D0A             
    22 00000105 506C6561736520656E-      						db	"Please enter one: ", 0dh, 0ah, 0h
    22 0000010E 746572206F6E653A20-
    22 00000117 0D0A00             
    23                                  
    24 0000011A 506C6561736520656E-      	stringInput			db	"Please enter a string: ", 0h
    24 00000123 746572206120737472-
    24 0000012C 696E673A2000       
    25 00000132 506C6561736520656E-      	keyInput			db	"Please enter a key for encrypting: ", 0h
    25 0000013B 7465722061206B6579-
    25 00000144 20666F7220656E6372-
    25 0000014D 797074696E673A2000 
    26 00000156 546869732069732074-      	outputStringPrompt	db	"This is the string you input: ", 0h
    26 0000015F 686520737472696E67-
    26 00000168 20796F7520696E7075-
    26 00000171 743A2000           
    27 00000175 546869732069732074-      	outputKeyPrompt		db	"This is the key you input: ", 0h
    27 0000017E 6865206B657920796F-
    27 00000187 7520696E7075743A20-
    27 00000190 00                 
    28 00000191 456E6372797074696E-      	encryptionProc		db	"Encrypting your string...", 0dh, 0ah, 0h
    28 0000019A 6720796F7572207374-
    28 000001A3 72696E672E2E2E0D0A-
    28 000001AC 00                 
    29                                   			.len		equ	($-encryptionProc)
    30 000001AD 486572652069732079-      	encryptedData		db	"Here is your encrypted data: ", 0h
    30 000001B6 6F757220656E637279-
    30 000001BF 707465642064617461-
    30 000001C8 3A2000             
    31                                   			.len		equ	($-encryptedData)
    32 000001CB 44656372797074696E-      	decryptionProc		db	"Decrypting your string...", 0dh, 0ah, 0h
    32 000001D4 6720796F7572207374-
    32 000001DD 72696E672E2E2E0D0A-
    32 000001E6 00                 
    33                                   			.len		equ	($-decryptionProc)
    34 000001E7 486572652069732079-      	decryptedData		db	"Here is your decrypted data: ", 0h
    34 000001F0 6F7572206465637279-
    34 000001F9 707465642064617461-
    34 00000202 3A2000             
    35                                   			.len		equ	($-decryptedData)
    36 00000205 4572726F72202D2073-      	defaultPrompt		db	"Error - select an option from the menu", 0ah, 0dh, 0h
    36 0000020E 656C65637420616E20-
    36 00000217 6F7074696F6E206672-
    36 00000220 6F6D20746865206D65-
    36 00000229 6E750A0D00         
    37                                   			.len		equ ($-defaultPrompt)
    38                                  
    39                                  	;Table-Driven Selection
    40                                      CaseTable:
    41 0000022E 31                              db	'1'
    42 0000022F [6D000000]                  	dd	Proc_1
    43                                  	.entrySz equ ($-CaseTable)
    44 00000233 32                              db	'2'
    45 00000234 [BF000000]                      dd	Proc_2
    46 00000238 33                              db	'3'
    47 00000239 [0C010000]                      dd	Proc_3
    48 0000023D 34                              db	'4'
    49 0000023E [21010000]                      dd	Proc_4
    50 00000242 35                              db	'5'
    51 00000243 [36010000]                      dd 	Proc_5
    52 00000247 36                              db	'6'
    53 00000248 [E0010000]                      dd 	Proc_6
    54 0000024C 78                              db	'x'
    55 0000024D [8C020000]                      dd 	Proc_x
    56                                  	.numEntries equ ($-CaseTable)/CaseTable.entrySz
    57                                  
    58                                  SECTION .bss
    59 00000000 <res 000000FF>          	readbuffer 		resb	0FFh				;readbuffer
    60                                  		.len		equ		($-readbuffer)
    61                                  
    62 000000FF <res 000000FF>           	userString		resb	255					;user's input string 
    63                                   		.len 		equ 	($-userString)
    64                                  
    65 000001FE <res 000000FF>           	userKey			resb	255					;user's input key
    66                                   		.len 		equ 	($-userKey)
    67                                  
    68 000002FD <res 000000FF>           	encryptionArray	resb	255					;storage for encrypted data
    69                                   		.len		equ 	($-encryptionArray)
    70                                  
    71 000003FC <res 000000FF>           	decryptionArray	resb	255					;storage for decrypted data
    72                                   		.len		equ 	($-decryptionArray)
    73                                  
    74 000004FB <res 000000FF>           	ctrUserString		resb	0FFh	;counter variable for the user's String
    75                                  	
    76 000005FA <res 000000FF>          	ctrUserKey			resb 	0FFh 	;counter variable for the user's Key
    77                                  
    78                                  
    79                                  SECTION     .text
    80                                  global      _start
    81                                  _start:
    82                                  	;Display Program Header
    83 00000000 E8(00000000)            		call 	Printendl
    84 00000005 68[00000000]                	push	openPrompt					;The prompt address - argument #1
    85 0000000A E8(00000000)            		call 	PrintString
    86 0000000F E8(00000000)                	call 	Printendl
    87                                  ;MenuLoop
    88                                  	MenuLoop:								;Start of MenuLoop
    89                                  
    90 00000014 B800000000                  	mov eax, 0
    91 00000019 BE[2E020000]                	mov	esi, CaseTable           		;address of table to esi (indirect addressing)  0x804a230
    92 0000001E B907000000              		mov	ecx,CaseTable.numEntries		;number of items in switch
    93                                  
    94 00000023 68[3D000000]            		push programTitle
    95 00000028 E8(00000000)            		call PrintString
    96                                  
    97 0000002D 68[00000000]                	push readbuffer							;push readbuffer onto the stack
    98 00000032 68FF000000                  	push readbuffer.len 					;push length of readbuffer onto the stack
    99 00000037 E8(00000000)                	call ReadText							; get input from the user
   100                                  
   101 0000003C 8A15[00000000]              	mov dl, [readbuffer]
   102                                  
   103                                  ;Switch
   104                                  	Switch1:   						
   105 00000042 3A16                            cmp	dl,[esi]       					;compare our value to the lookup table
   106 00000044 7505                            jne	Switch1_next   					;if this isn't the value we're looking for, next entry
   107 00000046 FF5601                          call NEAR [esi+1]   				;call function associated with value found
   108 00000049 EBC9                            jmp MenuLoop 						;Jump to MenuLoop
   109                                  	Switch1_next:                   		;repeat loop above for next entry
   110 0000004B 83C605                          add	esi,CaseTable.entrySz 			;point to next entry in case table
   111 0000004E E2F2                        	loop Switch1                
   112                                  	
   113                                  	Switch1_default:                		;default case (no matching entries in table)
   114 00000050 E83D020000              		call 	proc_default
   115                                  
   116 00000055 EBBD                    		Jmp MenuLoop 						;Jump to MenuLoop
   117                                     
   118                                  ;Exit	
   119                                  	Exit:
   120 00000057 68[18000000]                	push 	goodbyePrompt
   121 0000005C E8(00000000)                	call 	PrintString
   122                                  		;Setup the registers for exit and poke the kernel
   123 00000061 B801000000              		mov		eax,sys_exit				;What are we going to do? Exit!
   124 00000066 BB00000000              		mov		ebx,0						;Return code
   125 0000006B CD80                    		int		80h							;Poke the kernel
   126                                  
   127                                      
   128                                  ;Case Table Processes
   129                                  
   130                                  	Proc_1:									;PROC_1
   131 0000006D B9FF000000              	mov ecx, readbuffer.len					;loop counter
   132                                  	clearStringLoop:						;start of clearStringLoop; clear previous string
   133 00000072 C681[FFFFFFFF]00        		mov BYTE [readbuffer + ecx-1], 0	;
   134 00000079 C681[FE000000]00        		mov BYTE [userString + ecx-1], 0	;..traverse through readbuffer and userString clearing each byte-sized element
   135 00000080 E2F0                    	LOOP clearStringLoop					;Loop
   136                                  
   137 00000082 B900000000              	mov ecx, 0								;reset ecx : loop counter
   138 00000087 68[1A010000]            	push stringInput				  		;prompt the user
   139 0000008C E8(00000000)            	call PrintString 						;
   140                                  
   141 00000091 68[00000000]            	push readbuffer					  		;
   142 00000096 68FF000000              	push readbuffer.len						;
   143 0000009B E8(00000000)            	call ReadText							;get input from the user
   144                                  
   145 000000A0 BE00000000              	mov esi, 0						  		;reset index register
   146 000000A5 89C1                    	mov ecx, eax					  		;move eax (amount of characters input by the user) to ecx - loop counter
   147                                  	
   148 000000A7 83E801                  	sub eax, 1								;exclude last element of user input (\n) for PROC_5 encryption loop
   149 000000AA A3[FB040000]            	mov [ctrUserString], eax 				;ctrUserString - how many characters the user typed in
   150                                  	
   151                                    	stringLoop: 							; start of stringLoop; store string	
   152 000000AF 8B86[00000000]          		mov  eax, [readbuffer + esi]   		; get char from source 
   153 000000B5 8986[FF000000]          		mov  [userString + esi], eax  		; store it in the target 
   154 000000BB 46                      		inc  esi      				  		; move to next character 
   155 000000BC E2F1                      	loop stringLoop   
   156 000000BE C3                      	ret 									;end of PROC_1, return to menu
   157                                  
   158                                  	Proc_2:									;PROC_2
   159 000000BF B9FF000000              	mov ecx, readbuffer.len					;loop counter
   160                                  	clearKeyLoop:							;start of clearKeyLoop; clear previous key
   161 000000C4 C681[FFFFFFFF]00        		mov BYTE [readbuffer + ecx-1], 0	;
   162 000000CB C681[FD010000]00        		mov BYTE [userKey + ecx-1], 0 		;..traverse through readbuffer and userKey clearing each byte-sized element
   163 000000D2 E2F0                    	LOOP clearKeyLoop 						;Loop
   164                                  
   165 000000D4 68[32010000]            	push keyInput 							;prompt the user
   166 000000D9 E8(00000000)            	call PrintString 						;
   167                                  
   168 000000DE 68[00000000]            	push readbuffer							;
   169 000000E3 68FF000000              	push readbuffer.len 					;
   170 000000E8 E8(00000000)            	call ReadText 							;get input from the user
   171                                  
   172 000000ED BE00000000              	mov esi, 0								;reset index
   173 000000F2 89C1                    	mov ecx, eax							;mov eax (# of characters input by the user) to loop counter ecx
   174                                  
   175 000000F4 83E801                  	sub eax, 1								;exclude last element of user input (\n)
   176 000000F7 A3[FA050000]            	mov [ctrUserKey], eax					;ctrUserKey - how many characters the user input
   177                                  	
   178                                  	encryptionKeyLoop:						;start of encryptionKeyLoop; store key
   179 000000FC 8A86[00000000]          		mov al, [readbuffer + esi]			;get char from source			
   180 00000102 8886[FE010000]          		mov [userKey + esi], al				;store it in the target
   181 00000108 46                      		inc esi								;move to the next character
   182 00000109 E2F1                    	loop encryptionKeyLoop 					;Loop
   183 0000010B C3                      	ret 									;end of PROC_2, return to menu
   184                                  
   185                                  	Proc_3:									;PROC_3
   186 0000010C 68[56010000]            	push outputStringPrompt					;output prompt
   187 00000111 E8(00000000)            	call PrintString 						;
   188 00000116 68[FF000000]            	push userString 						;output user's input string
   189 0000011B E8(00000000)            	call PrintString 						;
   190 00000120 C3                      	ret 									;end of PROC_3, return to menu
   191                                  
   192                                  	Proc_4:									;PROC_4
   193 00000121 68[75010000]            	push outputKeyPrompt 					;output prompt
   194 00000126 E8(00000000)            	call PrintString 						;
   195 0000012B 68[FE010000]            	push userKey 							;output user's input key
   196 00000130 E8(00000000)            	call PrintString 						;
   197 00000135 C3                      	ret 									;end of PROC_4, return to menu
   198                                  
   199                                  	Proc_5:									;PROC_5
   200 00000136 B9[91010000]            	mov		ecx, encryptionProc 					;ecx:	contain the address of the string you wish to print
   201 0000013B BA1C000000              	mov		edx, encryptionProc.len 				;edx:	contain the length of the string
   202 00000140 B804000000              	mov		eax, 04h 								;eax:	contains the action we want to take: 4h = write
   203 00000145 BB01000000              	mov		ebx, 01h								;ebx:	contains the destination of the action: 1h = stdout
   204 0000014A CD80                    	int 80h											;tickle the kernel
   205                                  
   206 0000014C 31C9                    	xor ecx, ecx
   207                                  
   208 0000014E B9FF000000              		mov ecx, readbuffer.len					;loop counter
   209                                  	clearEncArrLoop:							;start of clearKeyLoop; clear previous key
   210 00000153 C681[FFFFFFFF]00        		mov BYTE [readbuffer + ecx-1], 0	;
   211 0000015A C681[FC020000]00        		mov BYTE [encryptionArray + ecx-1], 0 		;..traverse through readbuffer and userKey clearing each byte-sized element
   212 00000161 E2F0                    	LOOP clearEncArrLoop 						;Loop
   213                                  
   214 00000163 8A0D[FB040000]          	mov cl, [ctrUserString]					;8-bit loop counter stored in PROC_2
   215                                  
   216 00000169 BE00000000              	mov esi, 0								;index 0 in buffer
   217 0000016E BF00000000              	mov edi, 0								;index 0 in key buffer
   218 00000173 B800000000              	mov eax, 0 								; clear eax
   219                                  	
   220                                  	encryptLoop:							;start of encryptLoop; encrypt the user's string
   221 00000178 3B3D[FA050000]          		cmp edi, [ctrUserKey]					;compare key index to max size of key
   222 0000017E 7402                    		je resetKeyIndex						;[if] key index is same as max key size, set key index to 0
   223 00000180 7505                    		jne encrypt								;			[else], encrypt
   224                                  	resetKeyIndex:							;	[if]
   225 00000182 BF00000000              		mov edi, 0
   226                                  	
   227                                  	encrypt:								;	[else]
   228 00000187 8A86[FF000000]          		mov al, [userString + esi]				; move element of userString into al / move from userString to a register
   229 0000018D 3287[FE010000]          		xor al,  BYTE [userKey + edi]			; translate a BYTE / xor register with key
   230 00000193 8886[FD020000]          		mov [encryptionArray + esi], al			; move from register (result of XOR) to encryptionArray
   231 00000199 46                      		inc esi									; point to next byte in userString
   232 0000019A 47                      		inc edi             					; point to next byte in userKey
   233 0000019B E2DB                    	LOOP encryptLoop 						; Loop!
   234                                  
   235                                  
   236                                  	;Print out the data
   237 0000019D B9[AD010000]            	mov		ecx, encryptedData 						;ecx:	contain the address of the string you wish to print
   238 000001A2 BA1E000000              	mov		edx, encryptedData.len 					;edx:	contain the length of the string
   239 000001A7 B804000000              	mov		eax, 04h 								;eax:	contains the action we want to take: 4h = write
   240 000001AC BB01000000              	mov		ebx, 01h								;ebx:	contains the destination of the action: 1h = stdout
   241 000001B1 CD80                    	int 80h 										;tickle the kernel
   242                                  
   243 000001B3 B9[FD020000]            	mov		ecx, encryptionArray					;ecx:	contain the address of the string you wish to print
   244 000001B8 BAFF000000              	mov		edx, encryptionArray.len 				;edx:	contain the length of the string
   245 000001BD B804000000              	mov		eax, 04h 								;eax:	contains the action we want to take: 4h = write
   246 000001C2 BB01000000              	mov		ebx, 01h								;ebx:	contains the destination of the action: 1h = stdout
   247 000001C7 CD80                    	int 80h 										;tickle the kernel
   248                                  
   249 000001C9 B9[3A000000]            	mov ecx, endl 								;
   250 000001CE BA03000000              	mov edx, endl.len
   251 000001D3 B804000000              	mov eax, 04h
   252 000001D8 BB01000000              	mov ebx, 01h
   253 000001DD CD80                    	int 80h 									; "																"
   254                                  
   255 000001DF C3                      	ret 									;end of PROC_5, return to menu
   256                                  	
   257                                  	Proc_6:									;PROC_6
   258 000001E0 B9[CB010000]            	mov		ecx, decryptionProc 					;ecx:	contain the address of the string you wish to print
   259 000001E5 BA1C000000              	mov		edx, decryptionProc.len 				;edx:	contain the length of the string
   260 000001EA B804000000              	mov		eax, 04h 								;eax:	contains the action we want to take: 4h = write
   261 000001EF BB01000000              	mov		ebx, 01h								;ebx:	contains the destination of the action: 1h = stdout
   262 000001F4 CD80                    	int 80h											;tickle the kernel
   263                                  
   264 000001F6 31C9                    	xor ecx, ecx 							;clear ecx
   265                                  
   266 000001F8 B9FF000000              			mov ecx, readbuffer.len					;loop counter
   267                                  	clearDecArrLoop:							;start of clearKeyLoop; clear previous key
   268 000001FD C681[FFFFFFFF]00        		mov BYTE [readbuffer + ecx-1], 0	;
   269 00000204 C681[FB030000]00        		mov BYTE [decryptionArray + ecx-1], 0 		;..traverse through readbuffer and userKey clearing each byte-sized element
   270 0000020B E2F0                    	LOOP clearDecArrLoop 						;Loop
   271                                  
   272 0000020D 8A0D[FB040000]          	mov cl, [ctrUserString]					;loop counter
   273                                  
   274 00000213 BE00000000              	mov esi, 0								;string index
   275 00000218 BF00000000              	mov edi, 0								;key index
   276 0000021D B800000000              	mov eax, 0 								;clear eax
   277                                  
   278                                  	decryptLoop:
   279 00000222 3B3D[FA050000]          		cmp edi, [ctrUserKey]					;compare key index with size of key
   280 00000228 7402                    		je resetKeyIndex2						;if equal, reset index
   281 0000022A 7505                    		jne decrypt								;if not equal, decrypt
   282                                  	resetKeyIndex2:
   283 0000022C BF00000000              		mov edi, 0
   284                                  	
   285                                  	decrypt:
   286 00000231 8A86[FD020000]          		mov al, [encryptionArray + esi]
   287 00000237 3287[FE010000]          		xor al,  BYTE [userKey + edi]			;translate a BYTE
   288 0000023D 8886[FC030000]          		mov [decryptionArray + esi], al
   289 00000243 B000                    		mov al, 0
   290 00000245 46                      		inc esi									;point to next byte
   291 00000246 47                      		inc edi
   292 00000247 E2D9                    	LOOP decryptLoop
   293                                  
   294                                  	;Print out the data
   295 00000249 B9[E7010000]            	mov		ecx, decryptedData 						;ecx:	contain the address of the string you wish to print
   296 0000024E BA1E000000              	mov		edx, decryptedData.len 					;edx:	contain the length of the string
   297 00000253 B804000000              	mov		eax, 04h 								;eax:	contains the action we want to take: 4h = write
   298 00000258 BB01000000              	mov		ebx, 01h								;ebx:	contains the destination of the action: 1h = stdout
   299 0000025D CD80                    	int 80h											;tickle the kernel
   300                                  
   301 0000025F B9[FC030000]            	mov		ecx, decryptionArray 					;ecx:	contain the address of the string you wish to print
   302 00000264 BAFF000000              	mov		edx, decryptionArray.len 				;edx:	contain the length of the string
   303 00000269 B804000000              	mov		eax, 04h 								;eax:	contains the action we want to take: 4h = write
   304 0000026E BB01000000              	mov		ebx, 01h								;ebx:	contains the destination of the action: 1h = stdout
   305 00000273 CD80                    	int 80h											;tickle the kernel
   306                                  	
   307 00000275 B9[3A000000]            	mov ecx, endl
   308 0000027A BA03000000              	mov edx, endl.len
   309 0000027F B804000000              	mov eax, 04h
   310 00000284 BB01000000              	mov ebx, 01h
   311 00000289 CD80                    	int 80h 										;"															"
   312                                  
   313 0000028B C3                      	ret 									;end of PROC_6, return to menu
   314                                  
   315                                  	Proc_x: 								;Exit process
   316 0000028C E9C6FDFFFF              	jmp Exit 								;jump to Exit label
   317 00000291 C3                       	ret 									;end of PROC_X, return to menu
   318                                  
   319                                   	proc_default: 							;Default process
   320 00000292 68[05020000]                push	defaultPrompt
   321 00000297 6A29                        push 	defaultPrompt.len
   322 00000299 E8(00000000)                call	PrintText
   323 0000029E C3                          ret                                     ;end of PROC_DEFAULT, return to menu
